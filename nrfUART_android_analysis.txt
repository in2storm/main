Nordic nRFUART 어플리케이션 분석

목적 : nrf client(central) mode 구현을 위해 어플리케이션을 분석한다.
타겟 플랫폼이 다름에도 분석하는 이유는 central 모드의 기본 흐름을 파악하기 위함이고
BLE의 백그라운드 지식을 위해서 분석하였다.

    public static final UUID TX_POWER_UUID = UUID.fromString("00001804-0000-1000-8000-00805f9b34fb");
    public static final UUID TX_POWER_LEVEL_UUID = UUID.fromString("00002a07-0000-1000-8000-00805f9b34fb");
    public static final UUID CCCD = UUID.fromString("00002902-0000-1000-8000-00805f9b34fb");
    public static final UUID FIRMWARE_REVISON_UUID = UUID.fromString("00002a26-0000-1000-8000-00805f9b34fb");
    public static final UUID DIS_UUID = UUID.fromString("0000180a-0000-1000-8000-00805f9b34fb");
    public static final UUID RX_SERVICE_UUID = UUID.fromString("6e400001-b5a3-f393-e0a9-e50e24dcca9e");
    public static final UUID RX_CHAR_UUID = UUID.fromString("6e400002-b5a3-f393-e0a9-e50e24dcca9e");
    public static final UUID TX_CHAR_UUID = UUID.fromString("6e400003-b5a3-f393-e0a9-e50e24dcca9e");

    
GATT서비스가 발견되면

            if (action.equals(UartService.ACTION_GATT_SERVICES_DISCOVERED)) {
             	 mService.enableTXNotification();
            }

enableTXNotification()에서 아래 RX_SERVICE_UUID로 부터 RxService에 대한 핸들러를 가져온다.

BluetoothGattService RxService = mBluetoothGatt.getService(RX_SERVICE_UUID);

BluetoothGattCharacteristic TxChar = RxService.getCharacteristic(TX_CHAR_UUID);
        if (TxChar == null) {
            showMessage("Tx charateristic not found!");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }
히안하게도 RxService에서 TxChar를 추출한다? 그리고 TxChar를 Notification으로 한다.
왜냐면 모듈에서 보낸 데이터는 Notification으로 보낸것이기 때문에 이렇게 처리한다.
        mBluetoothGatt.setCharacteristicNotification(TxChar,true);
        //CCCD를 가져온다. Client Charactestic C~ Descriptor
        BluetoothGattDescriptor descriptor = TxChar.getDescriptor(CCCD);
        descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
        mBluetoothGatt.writeDescriptor(descriptor); //리모트 디바이스로 디스크립터를 보낸다.!!

그래 맞어. 바로 이거지. central 디바이스는 이렇게 Notification 디스크립터를 보내줘야 받을수있다는거!!!

ACTION_DATA_AVAILABLE 메시지는 onCharacteristicChanged() 콜백이 수행되면 브로드캐스팅한다.
        @Override
        public void onCharacteristicChanged(BluetoothGatt gatt,
                                            BluetoothGattCharacteristic characteristic) {
            broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);
        }
이 콜백 함수는 리모트 디바이스에서 notification을 보냈을 때 트리거 된다.


브로드캐스트에서 데이터가 오면 별거 없더라. Extra에서 txValue를 그냥 추출해낸 후 시간과 함께 UI로 뿌린다.ㅋ
          //*********************//
            if (action.equals(UartService.ACTION_DATA_AVAILABLE)) {
              
                 final byte[] txValue = intent.getByteArrayExtra(UartService.EXTRA_DATA);
                 runOnUiThread(new Runnable() {
                     public void run() {
                         try {
                         	String text = new String(txValue, "UTF-8");
                         	String currentDateTimeString = DateFormat.getTimeInstance().format(new Date());
                        	 	listAdapter.add("["+currentDateTimeString+"] RX: "+text);
                        	 	messageListView.smoothScrollToPosition(listAdapter.getCount() - 1);
                        	
                         } catch (Exception e) {
                             Log.e(TAG, e.toString());
                         }
                     }
                 });
             }


TxChar의 경우 아래와 같은 CCCD와 같은 작업없이 바로 RxChar.setValue()를 통해 쓴다.
    	BluetoothGattService RxService = mBluetoothGatt.getService(RX_SERVICE_UUID);
    	showMessage("mBluetoothGatt null"+ mBluetoothGatt);
    	if (RxService == null) {
            showMessage("Rx service not found!");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }
    	BluetoothGattCharacteristic RxChar = RxService.getCharacteristic(RX_CHAR_UUID);
        if (RxChar == null) {
            showMessage("Rx charateristic not found!");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }
        RxChar.setValue(value);
    	boolean status = mBluetoothGatt.writeCharacteristic(RxChar);

위의 함수는 UI에서 버튼이 눌러지면 아래와 같이 mService.writeRXCharacteristic(value)로 호출된다.
    // Handler Send button  
        btnSend.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            	EditText editText = (EditText) findViewById(R.id.sendText);
            	String message = editText.getText().toString();
            	byte[] value;
				try {
					//send data to service
					value = message.getBytes("UTF-8");
					mService.writeRXCharacteristic(value);



GATT Descriptors contain additional information and attributes of a GATT characteristic, BluetoothGattCharacteristic. They can be used to describe the characteristic's features or to control certain behaviours of the characteristic.

public boolean setValue (byte[] value)

Added in API level 18
Updates the locally stored value of this descriptor.

This function modifies the locally stored cached value of this descriptor. To send the value to the remote device, call writeDescriptor(BluetoothGattDescriptor) to send the value to the remote device.

아 그리고 매우 중요한사실
RX/TX charactristics의 기준은 서버(페리)기준이기 때문에 client(센트럴)에서
보낼때는 RxChar에를 컨트롤해서 데이터를 보내고
받을때는 TxChar로 부터 notification을 얻어내야한다.!!